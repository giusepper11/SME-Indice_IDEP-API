# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class EscolasEscolas(models.Model):
    dre = models.TextField(blank=True, null=True)
    codesc = models.CharField(primary_key=True, max_length=6)
    tipoesc = models.CharField(max_length=12, blank=True, null=True)
    nomesc = models.CharField(max_length=60, blank=True, null=True)
    ceu = models.TextField(blank=True, null=True)
    diretoria = models.CharField(max_length=60, blank=True, null=True)
    subpref = models.CharField(max_length=35, blank=True, null=True)
    endereco = models.TextField(blank=True, null=True)
    numero = models.CharField(max_length=6, blank=True, null=True)
    bairro = models.CharField(max_length=40, blank=True, null=True)
    cep = models.IntegerField(blank=True, null=True)
    tel1 = models.CharField(max_length=40, blank=True, null=True)
    tel2 = models.CharField(max_length=40, blank=True, null=True)
    fax = models.CharField(max_length=40, blank=True, null=True)
    situacao = models.CharField(max_length=10, blank=True, null=True)
    coddist = models.TextField(blank=True, null=True)
    distrito = models.TextField(blank=True, null=True)
    setor = models.SmallIntegerField(blank=True, null=True)
    codinep = models.IntegerField(blank=True, null=True)
    cd_cie = models.TextField(blank=True, null=True)
    eh = models.CharField(max_length=15, blank=True, null=True)
    fx_etaria = models.CharField(max_length=100, blank=True, null=True)
    dt_criacao = models.DateTimeField(blank=True, null=True)
    ato_criacao = models.CharField(max_length=20, blank=True, null=True)
    dom_criacao = models.DateTimeField(blank=True, null=True)
    dt_ini_conv = models.DateTimeField(blank=True, null=True)
    dt_ini_func = models.DateTimeField(blank=True, null=True)
    dt_autoriza = models.DateTimeField(blank=True, null=True)
    dt_extintao = models.DateTimeField(blank=True, null=True)
    nome_ant = models.CharField(max_length=100, blank=True, null=True)
    rede = models.TextField(blank=True, null=True)
    latitude = models.FloatField(blank=True, null=True)
    longitude = models.FloatField(blank=True, null=True)
    database = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'escolas_escolas'


class IdepAnosFinaisV1(models.Model):
    cod_esc = models.IntegerField(primary_key=True)
    nse = models.IntegerField(blank=True, null=True)
    icg = models.IntegerField(blank=True, null=True)
    number_2018 = models.TextField(db_column='2018', blank=True, null=True)  # Field renamed because it wasn't a valid Python identifier.
    number_2019 = models.TextField(db_column='2019', blank=True, null=True)  # Field renamed because it wasn't a valid Python identifier.
    number_2020 = models.TextField(db_column='2020', blank=True, null=True)  # Field renamed because it wasn't a valid Python identifier.
    number_2021 = models.TextField(db_column='2021', blank=True, null=True)  # Field renamed because it wasn't a valid Python identifier.
    number_2022 = models.TextField(db_column='2022', blank=True, null=True)  # Field renamed because it wasn't a valid Python identifier.
    number_2023 = models.TextField(db_column='2023', blank=True, null=True)  # Field renamed because it wasn't a valid Python identifier.

    class Meta:
        managed = False
        db_table = 'idep_anos_finais_v1'


class IdepAnosIniciaisV1(models.Model):
    cod_esc = models.IntegerField(primary_key=True)
    nse = models.IntegerField(blank=True, null=True)
    icg = models.IntegerField(blank=True, null=True)
    number_2018 = models.TextField(db_column='2018', blank=True, null=True)  # Field renamed because it wasn't a valid Python identifier.
    number_2019 = models.TextField(db_column='2019', blank=True, null=True)  # Field renamed because it wasn't a valid Python identifier.
    number_2020 = models.TextField(db_column='2020', blank=True, null=True)  # Field renamed because it wasn't a valid Python identifier.
    number_2021 = models.TextField(db_column='2021', blank=True, null=True)  # Field renamed because it wasn't a valid Python identifier.
    number_2022 = models.TextField(db_column='2022', blank=True, null=True)  # Field renamed because it wasn't a valid Python identifier.
    number_2023 = models.TextField(db_column='2023', blank=True, null=True)  # Field renamed because it wasn't a valid Python identifier.

    class Meta:
        managed = False
        db_table = 'idep_anos_iniciais_v1'


class MainTestmodel(models.Model):
    test = models.CharField(max_length=10)

    class Meta:
        managed = False
        db_table = 'main_testmodel'
